name: Go
on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
jobs:
  build:
    strategy:
      matrix:
        go-version: [1.18beta2]
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      etcd:
        image: gcr.io/etcd-development/etcd:v3.5.0
        ports:
          - 2379:2379
        env:
          ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
          ETCD_ADVERTISE_CLIENT_URLS: http://0.0.0.0:2379
        options: --health-cmd "ETCDCTL_API=3 etcdctl --endpoints http://localhost:2379 endpoint health" --health-interval 2s --health-timeout 1s --health-retries 2
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: app
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      mongo:
        image: mongo
        ports:
          - 27017:27017
      zookeeper:
        image: wurstmeister/zookeeper:latest
        ports:
          - 2181:2181
      kafka:
        image: wurstmeister/kafka:latest
        ports:
          - 9092:9092
        env:
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_CREATE_TOPICS: "test:1:1,trace:1:1,example:1:1"
      elasticsearch:
        image: elasticsearch:7.10.1
        env:
          discovery.type: single-node
        ports:
          - 9200:9200
      minio:
        image: bitnami/minio:latest
        env:
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
        ports:
          - 9000:9000
        options: --name minio-server

    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}

    - uses: actions/cache@v2
      id: cache-go-mod
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}

    - name: Environment Variables from Dotenv
      uses: c-py/action-dotenv-to-setenv@v3

    - name: Build
      if: steps.cache-go-mod.outputs.cache-hit != 'true'
      run: go build -v ./...

    - name: Test
      run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage.txt
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.41
          args: --disable errcheck --timeout 5m0s
          only-new-issues: true
