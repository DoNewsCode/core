name: Go
on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
jobs:
  build:
    strategy:
      matrix:
        go-version: [1.15.x,1.16.x]
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      etcd:
        image: bitnami/etcd
        env:
          ALLOW_NONE_AUTHENTICATION: yes
          ETCD_ADVERTISE_CLIENT_URLS: http://localhost:2379
        ports:
          - 2379:2379
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: app
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      mongo:
        image: mongo
        ports:
          - 27017:27017
      zookeeper:
        image: wurstmeister/zookeeper:latest
        ports:
          - 2181:2181
      kafka:
        image: wurstmeister/kafka:latest
        ports:
          - 9092:9092
        env:
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_CREATE_TOPICS: "test:1:1,trace:1:1,example:1:1"
      elasticsearch:
        image: elasticsearch:7.10.1
        env:
          discovery.type: single-node
        ports:
          - 9200:9200
      minio:
        image: bitnami/minio:latest
        env:
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
        ports:
          - 9000:9000
        options: --name minio-server
      clickhouse:
        image: yandex/clickhouse-server
        env:
          CLICKHOUSE_DB: gorm
          CLICKHOUSE_USER: gorm
          CLICKHOUSE_PASSWORD: gorm
        ports:
          - 9941:8123
          - 9942:9000
          - 9943:9009
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: gorm
          POSTGRES_USER: gorm
          POSTGRES_DB: gorm
          TZ: Asia/Shanghai
        ports:
          - 9920:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      sqlserver:
        image: mcmoe/mssqldocker:latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: LoremIpsum86
          MSSQL_DB: gorm
          MSSQL_USER: gorm
          MSSQL_PASSWORD: LoremIpsum86
        ports:
          - 9930:1433
        options: >-
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P LoremIpsum86 -l 30 -Q \"SELECT 1\" || exit 1"
          --health-start-period 10s
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}

    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('go.mod') }}

    - name: Environment Variables from Dotenv
      uses: c-py/action-dotenv-to-setenv@v3

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage.txt
